{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/user/ProjectCalendar/Frontend/src/Components/Calendar/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport './Calendar.css';\nimport builtCalendar from './BuiltCalendar';\nimport Popup from './Popup';\n\nconst Calendar = () => {\n  _s();\n\n  const [calendar, setCalendar] = useState([]);\n  const [value, setValue] = useState(moment());\n  const [showPopup, setShowPopup] = useState(false);\n  useEffect(() => {\n    setCalendar(builtCalendar(value));\n  }, [value]);\n\n  const isSelected = day => {\n    return value.isSame(day, 'day');\n  };\n\n  const beforeToday = day => {\n    const mounthPrev = value.clone().startOf('month').startOf('day');\n    return day.isBefore(mounthPrev, 'day');\n  };\n\n  const nextToday = day => {\n    const mounthNext = value.clone().endOf('month').endOf('day');\n    return day.isAfter(mounthNext, 'day');\n  };\n\n  const isToday = day => {\n    return day.isSame(new Date(), 'day');\n  };\n\n  const dayStyles = day => {\n    if (beforeToday(day)) return 'before';\n    if (nextToday(day)) return 'before';\n    if (isSelected(day)) return 'selected';\n    if (isToday(day)) return 'today';\n    return '';\n  };\n\n  const currMonthName = () => {\n    return value.format('MMMM');\n  };\n\n  const currYearName = () => {\n    return value.format('YYYY');\n  };\n\n  const prevMonth = () => {\n    return value.clone().subtract(1, 'month');\n  };\n\n  const nextMonth = () => {\n    return value.clone().add(1, 'month');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-head\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setValue(moment()),\n            children: \"Today\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setValue(prevMonth()),\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setValue(nextMonth()),\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currMonthName(), \"  \", currYearName()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowPopup(true),\n            children: \"Add Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day-names\",\n          children: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(d => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: d\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"week\",\n          children: calendar.map(week => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-wrapper\",\n            children: week.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"day\",\n              onClick: () => setValue(day),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"number\",\n                className: dayStyles(day),\n                children: [day.format('D').toString(), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(Popup, {\n      onClick: () => setShowPopup(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Calendar, \"nuF3J6adsG8ZEw30mYDJkD1RWrM=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/user/ProjectCalendar/Frontend/src/Components/Calendar/Calendar.js"],"names":["React","useState","useEffect","moment","builtCalendar","Popup","Calendar","calendar","setCalendar","value","setValue","showPopup","setShowPopup","isSelected","day","isSame","beforeToday","mounthPrev","clone","startOf","isBefore","nextToday","mounthNext","endOf","isAfter","isToday","Date","dayStyles","currMonthName","format","currYearName","prevMonth","subtract","nextMonth","add","map","d","week","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport './Calendar.css';\nimport builtCalendar from './BuiltCalendar';\nimport Popup from './Popup';\n\nconst Calendar = () => {\n  const [calendar, setCalendar] = useState([]);\n  const [value, setValue] = useState(moment());\n  const [showPopup, setShowPopup] = useState(false);\n\n  useEffect(() => {\n        setCalendar(builtCalendar(value));\n  }, [value])\n\n  const isSelected = (day) => {\n        return value.isSame(day, 'day');\n  }\n\n  const beforeToday = (day) => {\n        const mounthPrev = value.clone().startOf('month').startOf('day');\n\n        return day.isBefore(mounthPrev, 'day');\n  }\n\n  const nextToday = (day) => {\n        const mounthNext = value.clone().endOf('month').endOf('day');\n\n        return day.isAfter(mounthNext, 'day');\n  }\n\n  const isToday = (day) => {\n        return day.isSame(new Date(), 'day');\n  }\n\n  const dayStyles = (day) => {\n        if (beforeToday(day)) return 'before';\n\n        if (nextToday(day)) return 'before';\n\n        if (isSelected(day)) return 'selected';\n\n        if (isToday(day)) return 'today';\n\n        return '';\n  }\n\n  const currMonthName = () => {\n        return value.format('MMMM');\n  }\n\n  const currYearName = () => {\n        return value.format('YYYY');\n  }\n\n  const prevMonth = () => {\n        return value.clone().subtract(1, 'month');\n  }\n\n  const nextMonth = () => {\n        return value.clone().add(1, 'month');\n  }\n\n  return (\n        <div>\n            <div className='calendar'>\n                <div className=\"calendar-head\">\n                    <div >\n                        <button onClick={() => setValue(moment())}>Today</button>\n                        <button onClick={() => setValue(prevMonth())}>Back</button>\n                        <button onClick={() => setValue(nextMonth())}>Next</button>\n                    </div>\n                    <div>{currMonthName()}  {currYearName()}</div>\n                    <div>\n                        <button onClick={() => setShowPopup(true)}>Add Event</button>\n                    </div>\n                </div>\n                <div className='body'>\n                    <div className='day-names'>\n                        {\n                            ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(d => (\n                                <div>{d}</div>\n                            ))\n                        }\n                    </div>\n                    <div className='week'>\n                        {calendar.map((week) => (\n                            <div className='day-wrapper'>\n                                {week.map((day) => (\n                                    <div className='day' onClick={() => setValue(day)} >\n                                        <div id='number' className={dayStyles(day)}>{day.format('D').toString()} </div>\n                                    </div>\n                                ))\n                                }\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </div>\n            {showPopup && <Popup onClick={() => setShowPopup(false)} />}\n        </div>\n  )\n}\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}