{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/user/ProjectCalendar/Frontend/src/Routes/ProtectedRoute.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport paths from './paths';\nimport { useHistory } from \"react-router-dom\";\nimport Loading from '../Components/Loading';\n\nconst verifyToken = async () => {\n  try {\n    const token = localStorage.getItem('token');\n    const response = await fetch('http://localhost:1133/user/verify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        token\n      })\n    });\n    const body = await response.json();\n    console.log(body.auth);\n    return body.auth;\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n};\n\nconst ProtectedRoute = props => {\n  _s();\n\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  const history = useHistory();\n  useEffect(() => {\n    const test1 = async () => {\n      const result = await verifyToken();\n      setIsAuthenticated(result);\n    };\n\n    test1();\n  }, []);\n  const {\n    login,\n    registration,\n    calendar\n  } = paths;\n  const getRenderData = useMemo(() => {\n    if (isAuthenticated === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (isAuthenticated) {\n      const Component = props.component;\n      return /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 20\n      }, this);\n    } else {\n      history.push(paths.login);\n      return null;\n    }\n  }, [isAuthenticated]);\n  console.log('isAuthenticated', isAuthenticated);\n  return getRenderData;\n};\n\n_s(ProtectedRoute, \"JsTU/6tiQg2whIF3OiU7vJvL93s=\", false, function () {\n  return [useHistory];\n});\n\n_c = ProtectedRoute;\nexport default ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"sources":["/home/user/ProjectCalendar/Frontend/src/Routes/ProtectedRoute.js"],"names":["React","useEffect","useState","useMemo","paths","useHistory","Loading","verifyToken","token","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","json","console","log","auth","e","ProtectedRoute","props","isAuthenticated","setIsAuthenticated","history","test1","result","login","registration","calendar","getRenderData","Component","component","push"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,OAApC,QAAkD,OAAlD;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,OAAP,MAAoB,uBAApB;;AAIA,MAAMC,WAAW,GAAG,YAAY;AAC5B,MAAI;AACA,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAD,EAAsC;AAC9DC,MAAAA,MAAM,EAAE,MADsD;AAE9DC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFqD;AAK9DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,QAAAA;AAAF,OAAf;AALwD,KAAtC,CAA5B;AAOA,UAAMO,IAAI,GAAG,MAAMJ,QAAQ,CAACO,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,IAAjB;AACA,WAAON,IAAI,CAACM,IAAZ;AACH,GAZD,CAYE,OAAOC,CAAP,EAAU;AACRH,IAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACA,WAAO,KAAP;AACH;AAEJ,CAlBD;;AAoBA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCxB,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAMyB,OAAO,GAAGtB,UAAU,EAA1B;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM2B,KAAK,GAAG,YAAU;AACpB,YAAMC,MAAM,GAAG,MAAMtB,WAAW,EAAhC;AACAmB,MAAAA,kBAAkB,CAACG,MAAD,CAAlB;AACH,KAHD;;AAIAD,IAAAA,KAAK;AACR,GANQ,EAMN,EANM,CAAT;AAOA,QAAM;AAAEE,IAAAA,KAAF;AAASC,IAAAA,YAAT;AAAuBC,IAAAA;AAAvB,MAAoC5B,KAA1C;AACA,QAAM6B,aAAa,GAAG9B,OAAO,CAAC,MAAM;AAChC,QAAGsB,eAAe,KAAK,IAAvB,EAA4B;AACxB,0BAAO;AAAA,+BAAK,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AACD,QAAGA,eAAH,EAAmB;AACf,YAAMS,SAAS,GAAGV,KAAK,CAACW,SAAxB;AACA,0BAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAHD,MAGO;AACHR,MAAAA,OAAO,CAACS,IAAR,CAAahC,KAAK,CAAC0B,KAAnB;AACA,aAAO,IAAP;AACH;AACJ,GAX4B,EAW1B,CAACL,eAAD,CAX0B,CAA7B;AAYAN,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BK,eAA9B;AACA,SAAOQ,aAAP;AACH,CAzBD;;GAAMV,c;UAEclB,U;;;KAFdkB,c;AA2BN,eAAeA,cAAf","sourcesContent":["import React, {useEffect, useState, useMemo} from 'react'\n\nimport paths from './paths'\nimport { useHistory } from \"react-router-dom\";\n\nimport Loading from '../Components/Loading'\n\n\n\nconst verifyToken = async () => {\n    try {\n        const token = localStorage.getItem('token');\n        const response = await fetch('http://localhost:1133/user/verify', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json;charset=utf-8'\n            },\n            body: JSON.stringify({ token })\n        })\n        const body = await response.json()\n        console.log(body.auth)\n        return body.auth\n    } catch (e) {\n        console.log(e)\n        return false\n    }\n\n}\n\nconst ProtectedRoute = (props) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(null);\n    const history = useHistory();\n    useEffect(() => {\n        const test1 = async() =>{\n            const result = await verifyToken();\n            setIsAuthenticated(result);\n        }\n        test1();\n    }, [])\n    const { login, registration, calendar } = paths\n    const getRenderData = useMemo(() => {\n        if(isAuthenticated === null){\n            return <div><Loading></Loading></div>\n        }\n        if(isAuthenticated){\n            const Component = props.component;\n            return <Component/>\n        } else {\n            history.push(paths.login)\n            return null\n        }\n    }, [isAuthenticated])\n    console.log('isAuthenticated',isAuthenticated)\n    return getRenderData;\n}\n\nexport default ProtectedRoute\n\n"]},"metadata":{},"sourceType":"module"}